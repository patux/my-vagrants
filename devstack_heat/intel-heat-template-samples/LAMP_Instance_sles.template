{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template LAMP_Single_Instance: This template installs a single-instance with Apache PHP and MySQL",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String"
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.large",
      "AllowedValues" : [ "t1.micro", "m1.small", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "DBName": {
      "Default": "wordpress",
      "Description" : "The WordPress database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBUsername": {
      "Default": "admin",
      "NoEcho": "true",
      "Description" : "The WordPress database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword": {
      "Default": "admin",
      "NoEcho": "true",
      "Description" : "The WordPress database admin account password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBRootPassword": {
      "Default": "admin",
      "NoEcho": "true",
      "Description" : "Root password for MySQL",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },
    "LinuxDistribution": {
      "Default": "S11",
      "Description" : "Distribution of choice",
      "Type": "String",
      "AllowedValues" : "S11"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "32" },
      "m1.small"    : { "Arch" : "32" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "32" },
      "c1.xlarge"   : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64" }
    },
    "DistroArch2AMI": {
      "S11"      : { "32" : "S11-i386-cfntools", "64" : "S11-x86_64-cfntools" }
    }
  },

  "Resources" : {
    "WebServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "services" : {
              "sysvinit" : {
                "mysql"    : { "enabled" : "true", "ensureRunning" : "true" },
                "apache2"  : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "DistroArch2AMI", { "Ref" : "LinuxDistribution" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "mv /etc/sysconfig/proxy /etc/sysconfig/proxy-orig\n",
          "echo PROXY_ENABLED=\"yes\" > /etc/sysconfig/proxy\n",
          "echo HTTP_PROXY=\"http://proxy-us.intel.com:911\" > /etc/sysconfig/proxy\n",
          "echo HTTPS_PROXY=\"http://proxy-us.intel.com:911\" >> /etc/sysconfig/proxy\n",
          "echo NO_PROXY=\"localhost,127.0.0.1,intel.com,`hostname -f`\" >> /etc/sysconfig/proxy\n",
          "source /etc/sysconfig/proxy\n",
          "echo export http_proxy=http://10.253.8.111:3128/ >> /etc/profile.d/intel-proxy.sh\n",
          "echo export https_proxy=http://10.253.8.111:3128/ >> /etc/profile.d/intel-proxy.sh\n",
          "echo export no_proxy=localhost,.intel.com,`hostname -f` >> /etc/profile.d/intel-proxy.sh\n",
          "echo export HTTP_PROXY=http://10.253.8.111:3128/ >> /etc/profile.d/intel-proxy.sh\n",
          "export http_proxy=http://10.253.8.111:3128/\n",
          "export https_proxy=http://10.253.8.111:3128/\n",
          "export no_proxy=localhost,.intel.com,`hostname -f`\n",
          "export HTTP_PROXY=http://10.253.8.111:3128/\n",
          "zypper -n install apache2\n",
          "echo Welcome to `hostname -f` > /srv/www/htdocs/index.html\n",
          "zypper -n install php5 php5-mysql apache2-mod_php5\n",
          "zypper -n install mysql mysql-client\n",
          "rcmysql start\n",
          "# Setup MySQL root password and create a user\n",
          "mysqladmin -u root password '", { "Ref" : "DBRootPassword" }, "'\n",
          "cat << EOF | mysql -u root --password='", { "Ref" : "DBRootPassword" }, "'\n",
          "CREATE DATABASE ", { "Ref" : "DBName" }, ";\n",
          "GRANT ALL PRIVILEGES ON ", { "Ref" : "DBName" }, ".* TO \"", { "Ref" : "DBUsername" }, "\"@\"localhost\"\n",
          "IDENTIFIED BY \"", { "Ref" : "DBPassword" }, "\";\n",
          "FLUSH PRIVILEGES;\n",
          "EXIT\n",
          "EOF\n",
          "/usr/local/bin/cfn-init\n",
          "rcapache2 restart\n"
        ]]}}
      }
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WebServer", "PublicIp" ]}, "/wordpress"]] },
      "Description" : "URL for Wordpress wiki"
    }
  }
}
